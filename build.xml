<?xml version="1.0" encoding="UTF-8"?> 

<project default="all" name="ane.build.core"> 
	
	<taskdef resource="net/sf/antcontrib/antlib.xml"/>
	<target name="bootstrap">
		<mkdir dir="${user.home}/.ant/lib"/>
		<get dest="${user.home}/.ant/lib/ant-contrib.jar" src="http://search.maven.org/remotecontent?filepath=ant-contrib/ant-contrib/1.0b3/ant-contrib-1.0b3.jar"/>
	</target>
	
	<!-- SCRIPTS -->

	<scriptdef language="javascript" name="lower">
		<attribute name="name" />
		<attribute name="value" /> 
		<![CDATA[
		project.setProperty( attributes.get( "name" ),
							 attributes.get( "value" ).toLowerCase() );
		]]>
	</scriptdef>

	<scriptdef language="javascript" name="cleanchars">
		<attribute name="name" />
		<attribute name="value" /> 
		<![CDATA[
		project.setProperty( attributes.get( "name" ),
							 attributes.get( "value" ).replace( ".", "" ) );
		]]>
	</scriptdef>
	
	<scriptdef language="javascript" name="packagetopath">
		<attribute name="name" />
		<attribute name="value" /> 
		<![CDATA[
		project.setProperty( attributes.get( "name" ),
							 attributes.get( "value" ).replace( /\./g, "/" ) );
		]]>
	</scriptdef>

	<scriptdef language="javascript" name="wrapxmltag">
		<attribute name="name" /> 
		<attribute name="input" />
		<attribute name="tag" />
		<![CDATA[
		var value = "";
		var input = String(attributes.get( "input" ));
		var tag = String(attributes.get( "tag" ));
		if (input.length > 0)
		{ 
			value = "<"+tag+">"+input+"</"+tag+">";
		}
		project.setProperty( attributes.get( "name" ), value );
		]]>
	</scriptdef>



	<!-- CONFIGURATION -->

	<property file="./build_config/build.config" description="build properties" />
	<property file="./build_config/global.config" description="global properties" />

	<property file="${android.dir}/project.properties" description="android build properties" />
	<property name="android.target" value="${target}" />
	
	<property name="actionscript.name" value="${project.packagename}.swc" />
	<property name="default.name" value="${project.packagename}.default.swc" />
	<property name="android.name" value="${project.packagename}.jar" />

	<packagetopath name="project.packagepath" value="${project.packagename}" />
	<packagetopath name="android.packagepath" value="${android.package}" />
	
	<property name="AIR_SDK_HOME" value="${air.sdk}" />
	<taskdef resource="flexTasks.tasks" classpath="${air.sdk}/ant/lib/flexTasks.jar" />
	
	
	<!-- 
	//
	//
	//	VERSIONING 
	//
	//
	-->
	
	<target name="version">
		<antcall target="version_increment" />
		<antcall target="version_write" />
	</target>

	<target name="version_increment">
		<propertyfile file="./build_config/version.config">
			<entry key="version_build" type="int" operation="+" value="1" pattern="000" />
		</propertyfile>
	</target>

	<target name="version_write" >
		<property file="./build_config/version.config" description="build version properties" />
		<property name="version" value="${version_major}.${version_minor}.${version_build}" />
		<property name="version_externals" value="${version_externals_major}.${version_externals_minor}.${version_externals_build}" />

		<copy file="./build_config/extension.xml" tofile="./build_config/extension.build.xml" overwrite="true" >
			<filterchain>
				<tokenfilter>
					<replacestring from="@VERSION@" to="${version}"/>
				</tokenfilter>
			</filterchain>
		</copy>
		<copy file="${codetmpl}/Version.as" tofile="${actionscript.dir}/src/${project.packagepath}/Version.as" overwrite="true" >
			<filterchain>
				<tokenfilter>
					<replacestring from="@VERSION@" to="${version}"/>
					<replacestring from="@PACKAGE@" to="${project.packagename}"/>
				</tokenfilter>
			</filterchain>
		</copy>
		<copy file="${codetmpl}/Version.as" tofile="${default.dir}/src/${project.packagepath}/Version.as" overwrite="true" >
			<filterchain>
				<tokenfilter>
					<replacestring from="@VERSION@" to="${version}"/>
					<replacestring from="@PACKAGE@" to="${project.packagename}"/>
				</tokenfilter>
			</filterchain>
		</copy>
	</target>

	
	
	<!-- 
	//
	//
	//	ACTIONSCRIPT TASKS 
	//
	//
	-->

	<!-- Actionscript library -->
	<target name="pre_build_actionscript" />
	<target name="build_actionscript" depends="pre_build_actionscript">
		<echo message="Building actionscript library..."/>
		<compc output="${actionscript.dir}/bin/${actionscript.name}" debug="${DEBUG_MODE}" swf-version="17">
			<load-config filename="${air.sdk}/frameworks/air-config.xml" />
			<source-path path-element="${actionscript.dir}/src" />
			<include-sources dir="${actionscript.dir}/src" includes="*" />
		</compc>
		<echo message="done"/>
	</target>

	<target name="clean_actionscript" >
		<delete dir="${actionscript.dir}/bin" />
	</target>
	
	<!-- Default library -->
	<target name="pre_build_default" />
	<target name="build_default" depends="pre_build_default" >
		<echo message="Building default library..."/>
		<compc output="${default.dir}/bin/${default.name}" debug="${DEBUG_MODE}" swf-version="17">
			<load-config filename="${air.sdk}/frameworks/air-config.xml" />
			<source-path path-element="${default.dir}/src" />
			<include-sources dir="${default.dir}/src" includes="*" />
		</compc>
		<echo message="done"/>
	</target>

	<target name="clean_default" >
		<delete dir="${default.dir}/bin" />	
	</target>

	

	<!-- 
	//
	//
	//	ANDROID TASKS 
	//
	//
	-->
	
	<!-- Build the Android library -->
	<target name="pre_build_android" />
	<target name="build_android" depends="pre_build_android">
		<echo message="Building Android library..."/>

		<exec executable="./gradlew" dir="${android.dir}">
			<arg line="assemble" />
		</exec>

		<delete>
			<fileset dir="${android.dir}" defaultexcludes="false">
				<include name="**/.DS_Store"  />
				<include name="build"  />
			</fileset>
		</delete>

	</target>

	<target name="setup_platform_options_android" >
		<fileset id="platform.android.jar.fs" dir="${android.dir}/${android.outputdir}" casesensitive="yes">
			<include name="**/*.jar"/>
			<exclude name="**/${android.name}" />
		</fileset>
		<pathconvert refid="platform.android.jar.fs" property="platform.android.jars" pathsep="&lt;/packagedDependency&gt;${line.separator}&lt;packagedDependency&gt;">
			<map from="${basedir}/platform/android/build/" to="" />
		</pathconvert>
		<wrapxmltag name="platform.android.jars.str" input="${platform.android.jars}" tag="packagedDependency" />
		<property name="version" value="${version_major}.${version_minor}.${version_build}" />
		<property name="version_externals" value="${version_externals_major}.${version_externals_minor}.${version_externals_build}" />
		<copy file="./build_config/platform_android.xml" tofile="./build_config/platform_android.build.xml" overwrite="true" >
			<filterchain>
				<tokenfilter>
					<replacestring from="@JARS@" to="${platform.android.jars.str}"/>
					<replacestring from="@VERSION@" to="${version}"/>
					<replacestring from="@VERSIONEXT@" to="${version_externals}"/>
				</tokenfilter>
			</filterchain>
		</copy>
	</target>

	<target name="copy_corenativeextension_android_lib" if="${android.packagecorelib}">
		<echo message="Copying corenativeextension.android.lib ..."/>
		<copy overwrite="true" todir="${android.dir}/${android.outputdir}">
			<fileset file="${supportlibs.corejar}" />
		</copy>
	</target> 

	<target name="pre_package_android" />
	<target name="package_android" depends="pre_package_android" description="Copy Android files for packaging" >
		<delete dir="${android.dir}/${android.outputdir}/android-profile" />
		<antcall target="copy_corenativeextension_android_lib" />

		<mkdir dir="${android.dir}/${output.tmpdir}" />
		<unzip src="${android.dir}/app/build/outputs/aar/app-release.aar" dest="${android.dir}/${output.tmpdir}" overwrite="true"/>

		<copy file="${android.dir}/${output.tmpdir}/classes.jar" tofile="${android.dir}/${android.outputdir}/${android.name}" />
		
		<copy includeEmptyDirs="false" overwrite="true" todir="${android.dir}/${android.outputdir}/${project.packagename}-res">
			<!--<fileset dir="${android.dir}/${output.tmpdir}/res/" >-->
			<fileset dir="${android.dir}/app/src/main/res/" >
				<exclude name="**/values.xml" />
			</fileset>
		</copy>
		
		<copy includeEmptyDirs="false" overwrite="true" failonerror="false" quiet="true" todir="${android.dir}/${android.outputdir}">
			<fileset dir="${android.dir}/app/libs" >
				<exclude name="**/corenativeextension.android.lib.jar" />
				<exclude name="**/corenativeextension.android.lib.air.jar" />
				<exclude name="**/FlashRuntimeExtensions.jar" />
				<exclude name="**/runtimeClasses.jar" />
				<exclude name="**/mockable-android*" />
			</fileset>
		</copy>

		<copy includeEmptyDirs="false" overwrite="true" failonerror="false" quiet="true" todir="${android.dir}/${android.outputdir}/libs">
			<fileset dir="${android.dir}/${output.tmpdir}/jni/" />
		</copy>
		
		<delete dir="${android.dir}/${output.tmpdir}" />
		
		<copy includeEmptyDirs="false" overwrite="true" failonerror="false" quiet="true" todir="${android.dir}/${android.outputdir}">
			<fileset dir="${android.dir}/externals/" />
		</copy>
				

		<antcall target="setup_platform_options_android" />
	</target>
	

	<target name="explode_aar">
		<basename property="explode_aar_name" file="${explode_aar_file}" suffix=".aar" />
		<echo message="explode ${explode_aar_file} ${explode_aar_name}" />

		<mkdir dir="${android.dir}/${output.tmpdir}" />
		<unzip src="${explode_aar_file}" dest="${android.dir}/${output.tmpdir}" overwrite="true"/>

		<copy file="${android.dir}/${output.tmpdir}/classes.jar" tofile="${android.dir}/${android.outputdir}/${explode_aar_name}.jar" />
		<copy includeEmptyDirs="false" overwrite="true" todir="${android.dir}/${android.outputdir}/${explode_aar_name}-res" failonerror="false">
			<fileset dir="${android.dir}/${output.tmpdir}/res/" />
		</copy>

		<copy includeEmptyDirs="false" overwrite="true" failonerror="false" quiet="true" todir="${android.dir}/${android.outputdir}/libs">
			<fileset dir="${android.dir}/${output.tmpdir}/jni/" />
		</copy>

		<delete dir="${android.dir}/${output.tmpdir}" />
		
	</target>




	<target name="externals_android" if="android.externals" >
		<property file="./build_config/version.config" description="build version properties" />
		<delete dir="${android.dir}/externals" />
		<for list="${android.externals}" param="lib">
			<sequential>
				<echo>@{lib}</echo>
				<fileset dir="${android.sdk}/extras" id="fileset1">
					<include name="**/@{lib}.aar" />
					<include name="**/@{lib}.jar" />
				</fileset>
				<fileset dir="${android.gradle_cache}" id="fileset2">
					<include name="**/@{lib}.aar" />
					<include name="**/@{lib}.jar" />
				</fileset>
				<path id="aarfile">
					<first>
						<union>
							<resources refid="fileset1" />
   							<resources refid="fileset2" />
						</union>
					</first>
				</path>
				<mkdir dir="${android.dir}/${output.tmpdir}" />
				<unzip src="${toString:aarfile}" dest="${android.dir}/${output.tmpdir}" overwrite="true"/>
				<copy file="${android.dir}/${output.tmpdir}/classes.jar" tofile="${android.dir}/externals/@{lib}.jar" failonerror="false" />
				<copy todir="${android.dir}/externals" failonerror="false" flatten="true">
					<fileset dir="${android.dir}/${output.tmpdir}" >
						<include name="**/*.jar" />
						<exclude name="classes.jar" />
					</fileset>
				</copy>
				<copy todir="${android.dir}/externals/@{lib}-res" failonerror="false">
					<fileset dir="${android.dir}/${output.tmpdir}/res" />
				</copy>
				<delete dir="${android.dir}/${output.tmpdir}" />

			</sequential>
		</for>
	
	</target>


	<target name="clean_android">
		<delete dir="${android.dir}/${android.outputdir}" />
	</target>




	<!-- 
	//
	//
	//	ANE PACKAGE 
	//
	//
	-->

	<target name="build" description="Build Libraries" >
		<antcall target="build_actionscript" />
		<antcall target="build_default" />
		<antcall target="build_android" />
	</target>


	<target name="package">
		<antcall target="package_android" />
		<antcall target="package_ane" />
		<antcall target="package_asdocs" />
	</target>


	<target name="package_ane" description="Package ANE">
		<!-- Copy over library.swf to each platform output -->
		<mkdir dir="${output.tmpdir}" />
		<unzip src="${actionscript.dir}/bin/${actionscript.name}" dest="${output.tmpdir}" overwrite="true"/>
		<copy file="${output.tmpdir}/library.swf" todir="${android.dir}/${android.outputdir}" failonerror="true" />
		<delete dir="${output.tmpdir}" />
		
		<unzip src="${default.dir}/bin/${default.name}" dest="${default.dir}/bin" overwrite="true"/>
		<delete file="${default.dir}/bin/catalog.xml" />
		
		<mkdir dir="${output.dir}" />
		<!-- Compile ANE -->
		<exec executable="${air.sdk}/bin/adt" failonerror="true">
			<arg value="-package"/>
			<arg value="-target"/>
			<arg value="ane"/>
			<arg value="${output.dir}/${output.name}"/>
			<arg value="./build_config/extension.build.xml"/>
			<arg line="-swc ${actionscript.dir}/bin/${actionscript.name}"/>
			<arg line="-platform Android-ARM -platformoptions ./build_config/platform_android.build.xml -C ${android.dir}/${android.outputdir} ."/>
			<arg line="-platform Android-ARM64 -platformoptions ./build_config/platform_android.build.xml -C ${android.dir}/${android.outputdir} ."/>
			<arg line="-platform Android-x86 -platformoptions ./build_config/platform_android.build.xml -C ${android.dir}/${android.outputdir} ."/>
			<arg line="-platform default -C ${default.dir}/bin ."/>
		</exec>
		
		<delete file="${android.dir}/${android.outputdir}/library.swf" />
		<delete file="${default.dir}/bin/library.swf" />   
	</target>


	<target name="package_asdocs" if="${output.packageasdocs}">
		<property name="output.docs.tmp" value="${output.dir}/tmpdocs" />

		<mkdir dir="${output.docs.tmp}" />

		<exec executable="${air.sdk}/bin/asdoc" failonerror="true">
			<env key="FLEX_HOME" value="${air.sdk}"/>
			<env key="FALCON_HOME" value="${air.sdk}"/>
			<arg line="-source-path ${actionscript.dir}/src" />
			<arg line="-window-title 'distriqt // ${project.name}'" />
			<arg line="-main-title '&lt;a href=&quot;http://distriqt.com&quot; target=&quot;_top&quot; &gt;distriqt&lt;/a&gt; // ${project.name} Native Extension Documentation'" />
			<arg line="-footer 'Copyright &lt;a href=&quot;http://distriqt.com&quot; target=&quot;_top&quot; &gt;distriqt&lt;/a&gt; 2016'" />
			<arg line="-doc-sources ${actionscript.dir}/src"/>
			<arg line="-output ${output.docs.tmp}"/>
			<arg line="-lenient" />
			<arg line="-keep-xml=true" />
			<arg line="-skip-xsl=true" />
			<arg line="-library-path+='${air.sdk}/frameworks/libs/air/airglobal.swc'"/>
		</exec>
		
		<zip destfile="${output.dir}/${output.name}" update="true">
			<zipfileset dir="${output.docs.tmp}/tempdita" prefix="docs">
				<include name="*.*"/>
				<exclude name="ASDoc_Config.xml"/>
				<exclude name="overviews.xml"/>
			</zipfileset>
		</zip>  

		<delete dir="${output.docs.tmp}" />

	</target>

	<target name="clean_ane" >
		<delete>
			<fileset dir="./build_config">
				<include name="*.build.xml" />
			</fileset>
		</delete>
	</target>


	<!-- CLEAN -->

	<target name="clean">
		<antcall target="clean_actionscript" />
		<antcall target="clean_default" />
		<antcall target="clean_android" />
		<antcall target="clean_ane" />
	</target>

	

	<!-- 
	//
	//
	//	DOCUMENTATION 
	//
	//
	-->

	<target name="docs" description="Generate asdocs">
		<delete dir="${output.docs}" />
		<mkdir dir="${output.docs}" />
		
		<exec executable="${air.sdk}/bin/asdoc" failonerror="true">
			<env key="FLEX_HOME" value="${air.sdk}"/>
			<env key="FALCON_HOME" value="${air.sdk}"/>
			<arg line="-source-path ${actionscript.dir}/src" />
			<arg line="-window-title 'distriqt // ${project.name}'" />
			<arg line="-main-title '&lt;a href=&quot;http://distriqt.com&quot; target=&quot;_top&quot; &gt;distriqt&lt;/a&gt; // ${project.name} Native Extension Documentation'" />
			<arg line="-footer 'Copyright &lt;a href=&quot;http://distriqt.com&quot; target=&quot;_top&quot; &gt;distriqt&lt;/a&gt; 2016'" />
			<arg line="-doc-sources ${actionscript.dir}/src"/>
			<arg line="-output ${output.docs}"/>
			<arg line="-lenient" />
			<arg line="-library-path+='${air.sdk}/frameworks/libs/air/airglobal.swc'"/>
		</exec>	  

	</target>
	



	<!-- 
	//
	//
	//	GLOBAL TARGETS 
	//
	//
	-->

	<target name="all" depends="clean, version, build, externals_android, package, docs" />



</project>
